배포 후에 Optional하게 Log 레벨을 바꿔야 하는 경우가 있습니다. 이런 경우 재기동하지 않고 프로그램이 돌아가는 상태에 Log 레벨을 바꿀 수 있어야 합니다.
Logback은 Log4j를 토대로 새롭게 만든 라이브러리입니다. 
Logback을 사용하여 Log를 커스텀하고 레벨 관리를 할 수 있는 방법을 알아보겠습니다.
 
- 로그를 위한 라이브러리는 Logback 뿐만 아니라 Log4J 등이 있습니다. 이 다양한 라이브러리를 같은 방법으로 사용할 수 있도록 도와주는 facade pattern인 SLF4J를 사용하여 해당 블로그에서는 로그를 표현할 것입니다.
 
Spring-boot를 사용하기에 logback-spring.xml을 사용합니다.
<configuration debug="true" scan="true" scanPeriod="5 seconds">
    <appender name="unsecure" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <OnMismatch>DENY</OnMismatch>
            <OnMatch>ACCEPT</OnMatch>
        </filter>
        <encoder>
            <charset>UTF-8</charset>
            <Pattern>%d %-4relative [%thread %X{userid}] %-5level %logger{35} - %msg%n </Pattern>
        </encoder>
    </appender>\
    <!--Add logger-->
    <logger name="debugger" level="debug" additivity="false">
        <appender-ref ref="unsecure"/>
    </logger>
    <root level="debug">
        <appender-ref ref="unsecure"/>
    </root>
</configuration>
scanPeriod을 사용하여 레벨 체크 스캔 시간 간격을 설정할 수 있다.
logger는 패키지별 로그 level을 각각 설정할 수 있습니다.
name: 해당 패키지명
level: 패키지에 해당하는 log level
pattern은 sharset에 대한 log 패턴을 정의합니다.
 
 
[설정 예시]
scanPeriod = “5 seconds”
name = “com.innogrid.openstackit.configure.log” 
level= “INFO”
 
5초뒤 아래 화면과 같이 나온 후, log level이 변경된다.
